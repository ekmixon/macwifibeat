#!/usr/bin/env python
"""Open a PR from the current branch"""

import sys
import os
import argparse
import requests
import re
from subprocess import check_call, check_output
from os.path import expanduser

usage = """
Example usage:

Open PR against master, with the review label:

./dev-tools/open_pr --remote tsg

Open PR against the 6.0 branch, with the review and in progress labels:

./dev-tools/open_pr --remote tsg --branch 6.0 --wip

Open PR against the 6.0 branch, with the review and docs labels:

./dev-tools/open_pr --remote tsg --labels=review,docs

The title and message of the PR are taken from the _last_ commit in the
PR.
"""

def main():
    parser = argparse.ArgumentParser(
        description="Creates a PR against a given branch",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=usage)

    parser.add_argument("--remote", default="origin",
                        help="Your git remote to push the branch to.")
    parser.add_argument("--branch", default="master",
                        help="Remote branch to open PR against (e.g 5.0)")
    parser.add_argument("--wip", action="store_true",
                        help="Add the `in progress` label")
    parser.add_argument("--labels",
                        help="Extra labels to add (comma separated)")
    parser.add_argument("--yes", action="store_true",
                        help="Assume yes.")
    args = parser.parse_args()
    local_branch = check_output("git rev-parse --abbrev-ref HEAD", shell=True).strip()
    title = check_output("git show -q HEAD --format='%s'", shell=True).strip()
    msg = check_output("git show -q HEAD --format='%b'", shell=True).strip()

    labels = ["review"]
    if args.labels:
        labels.extend(args.labels.split(","))
    if args.wip:
        labels += "in progress"

    if version := get_version(os.getcwd()):
        labels.append(f"v{version}")

    print(f"Branch: {args.branch}")
    print(f"Remote: {args.remote}")
    print(f"Local branch: {local_branch}")
    print(f"Title: {title}")
    print(f"Message: {msg}")
    print(f"Labels: {labels}")

    if not args.yes and raw_input("Continue? [Y/n]: ") not in ["y", "Y", ""]:
        return 1

    # push branch
    check_call(f"git push --set-upstream {args.remote} {local_branch}", shell=True)


    # open PR
    token = open(expanduser("~/.elastic/github.token"), "r").read().strip()
    base = "https://api.github.com/repos/elastic/beats"
    session = requests.Session()
    session.headers.update({"Authorization": f"token {token}"})

    remote_url = check_output(f"git remote get-url {args.remote}", shell=True)
    remote_user = re.search("github.com:(.+)/beats", remote_url)[1]

    request = session.post(
        f"{base}/pulls",
        json=dict(
            title=title,
            head=f"{remote_user}:{local_branch}",
            base=args.branch,
            body=msg,
        ),
    )

    if request.status_code > 299:
        print(f"Creating PR failed: {request.json()}")
        sys.exit(1)
    new_pr = request.json()

    # add labels
    session.post(base + f'/issues/{new_pr["number"]}/labels', json=labels)

    print(f'\nDone. PR created: {new_pr["html_url"]}')
    print("Please go and review it for the message and labels.")


def get_version(beats_dir):
    pattern = re.compile(r'(const\s|)\w*(v|V)ersion\s=\s"(?P<version>.*)"')
    with open(os.path.join(beats_dir, "libbeat/version/version.go"), "r") as f:
        for line in f:
            if match := pattern.match(line):
                return match['version']


if __name__ == "__main__":
    sys.exit(main())
